import PropTypes from 'prop-types';
import { useRef, useEffect } from 'react';
import invariant from 'tiny-invariant';

var useBeforeunload = function useBeforeunload(handler) {
  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;
  var eventListenerRef = useRef();
  useEffect(function () {
    eventListenerRef.current = function (event) {
      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event

      if (typeof returnValue === 'string') {
        return event.returnValue = returnValue;
      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,
      // instead it requires `event.returnValue` to be set
      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility


      if (event.defaultPrevented) {
        return event.returnValue = '';
      }
    };
  }, [handler]);
  useEffect(function () {
    var eventListener = function eventListener(event) {
      return eventListenerRef.current(event);
    };

    window.addEventListener('beforeunload', eventListener);
    return function () {
      window.removeEventListener('beforeunload', eventListener);
    };
  }, []);
};

var Beforeunload = function Beforeunload(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      onBeforeunload = _ref.onBeforeunload;
  useBeforeunload(onBeforeunload);
  return children;
};

Beforeunload.propTypes
/* remove-proptypes */
= process.env.NODE_ENV !== "production" ? {
  children: PropTypes.any,
  onBeforeunload: PropTypes.func.isRequired
} : {};

export { Beforeunload, useBeforeunload };
//# sourceMappingURL=index.esm.js.map
