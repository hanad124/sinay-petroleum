'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var react = require('react');
var invariant = require('tiny-invariant');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);

var useBeforeunload = function useBeforeunload(handler) {
  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== "production" ? invariant__default["default"](false, 'Expected `handler` to be a function') : invariant__default["default"](false) : void 0;
  var eventListenerRef = react.useRef();
  react.useEffect(function () {
    eventListenerRef.current = function (event) {
      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event

      if (typeof returnValue === 'string') {
        return event.returnValue = returnValue;
      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,
      // instead it requires `event.returnValue` to be set
      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility


      if (event.defaultPrevented) {
        return event.returnValue = '';
      }
    };
  }, [handler]);
  react.useEffect(function () {
    var eventListener = function eventListener(event) {
      return eventListenerRef.current(event);
    };

    window.addEventListener('beforeunload', eventListener);
    return function () {
      window.removeEventListener('beforeunload', eventListener);
    };
  }, []);
};

var Beforeunload = function Beforeunload(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      onBeforeunload = _ref.onBeforeunload;
  useBeforeunload(onBeforeunload);
  return children;
};

Beforeunload.propTypes
/* remove-proptypes */
= process.env.NODE_ENV !== "production" ? {
  children: PropTypes__default["default"].any,
  onBeforeunload: PropTypes__default["default"].func.isRequired
} : {};

exports.Beforeunload = Beforeunload;
exports.useBeforeunload = useBeforeunload;
//# sourceMappingURL=index.cjs.js.map
