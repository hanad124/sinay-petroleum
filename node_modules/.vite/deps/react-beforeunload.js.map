{
  "version": 3,
  "sources": ["../../tiny-invariant/dist/esm/tiny-invariant.js", "../../react-beforeunload/src/useBeforeunload.js", "../../react-beforeunload/src/Beforeunload.js"],
  "sourcesContent": ["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\n\nconst useBeforeunload = (handler) => {\n  invariant(\n    handler == null || typeof handler === 'function',\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      const returnValue = handler?.(event);\n      // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n      if (typeof returnValue === 'string') {\n        return (event.returnValue = returnValue);\n      }\n      // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n      if (event.defaultPrevented) {\n        return (event.returnValue = '');\n      }\n    };\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => eventListenerRef.current(event);\n    window.addEventListener('beforeunload', eventListener);\n    return () => {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nexport default useBeforeunload;\n", "import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes /* remove-proptypes */ = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired,\n};\n\nexport default Beforeunload;\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,IAAI,eAAe;AACnB,IAAI,SAAS;AACb,SAAS,UAAU,WAAW,SAAS;AACnC,MAAI,WAAW;AACX;AAAA,EACJ;AACA,MAAI,cAAc;AACd,UAAM,IAAI,MAAM,MAAM;AAAA,EAC1B;AACA,MAAI,WAAW,OAAO,YAAY,aAAa,QAAQ,IAAI;AAC3D,MAAI,QAAQ,WAAW,GAAG,OAAO,QAAQ,IAAI,EAAE,OAAO,QAAQ,IAAI;AAClE,QAAM,IAAI,MAAM,KAAK;AACzB;;;ACTA,IAAMA,kBAAkB,SAAlBA,iBAAmBC,SAAY;AACnC,IACEA,WAAW,QAAQ,OAAOA,YAAY,cADxC,OAAAC,UAEE,OAAA,qCAFO,IAATA,UAAA,KAAA,IAAA;AAKMC,MAAAA,uBAAmBC,qBAAM;AAE/BC,8BAAU,WAAM;AACdF,qBAAiBG,UAAU,SAACC,OAAU;AAC9BC,UAAAA,cAAcP,YAAAA,QAAAA,YAAAA,SAAAA,SAAAA,QAAUM,KAAH;AAG3B,UAAI,OAAOC,gBAAgB,UAAU;AACnC,eAAQD,MAAMC,cAAcA;MAC7B;AAIGD,UAAAA,MAAME,kBAAkB;AAC1B,eAAQF,MAAMC,cAAc;MAC7B;IACF;EACF,GAAE,CAACP,OAAD,CAfM;AAiBTI,8BAAU,WAAM;AACd,QAAMK,gBAAgB,SAAhBA,eAAiBH,OAAD;AAAA,aAAWJ,iBAAiBG,QAAQC,KAAzB;IAAX;AACtBI,WAAOC,iBAAiB,gBAAgBF,aAAxC;AACA,WAAO,WAAM;AACXC,aAAOE,oBAAoB,gBAAgBH,aAA3C;IACD;EACF,GAAE,CAAA,CANM;AAOV;AChCD,IAAMI,eAAe,SAAfA,cAAwD,MAAA;AAAA,MAAA,gBAAA,KAAtCC,UAAAA,WAAsC,kBAAA,SAA3B,OAA2B,eAArBC,iBAAqB,KAArBA;AACvChB,kBAAgBgB,cAAD;AACf,SAAOD;AACR;AAEDD,aAAaG,YAAmC,OAAA;EAC9CF,UAAUG,kBAAAA,QAAUC;EACpBH,gBAAgBE,kBAAAA,QAAUE,KAAKC;AAFe,IAAhD,CAAA;",
  "names": ["useBeforeunload", "handler", "invariant", "eventListenerRef", "useRef", "useEffect", "current", "event", "returnValue", "defaultPrevented", "eventListener", "window", "addEventListener", "removeEventListener", "Beforeunload", "children", "onBeforeunload", "propTypes", "PropTypes", "any", "func", "isRequired"]
}
